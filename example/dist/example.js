require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var React = require('react');
var Renderics = require('react-renderics');

//INPUT
var siteScopeDevices = [genSiteScopeDevice("VALENCIA01:CPU:OK"), genSiteScopeDevice("VALENCIA01:PING:WARNING"), genSiteScopeDevice("VALENCIA01:JBOSS:OK"), genSiteScopeDevice("BENICIA01:CPU:OK"), genSiteScopeDevice("BARCELONA01:PING:WARNING"), genSiteScopeDevice("LONDON01:TOMCAT:OK"), genSiteScopeDevice("MANCHESTER01:CPU:BAD"), genSiteScopeDevice("MANCHESTER01:PING:BAD"), genSiteScopeDevice("MANCHESTER01:TOMCAT:WARNING")];

function genSiteScopeDevice(siteScopeLineLog) {
	var device = siteScopeLineLog.split(":");
	var deviceName = device[0];
	var deviceType = device[1];

	//TODO Melhorar este tratamento e quebrar em outra função
	var deviceStatus = "images/";
	if (device[2] == "OK") deviceStatus += "ic-ok.png";else if (device[2] == "WARNING") deviceStatus += "ic-warning.png";else deviceStatus += "ic-error.png";

	return {
		name: deviceName,
		imageSrc: deviceStatus,
		type: deviceType
	};
};

var App = React.createClass({
	displayName: 'App',

	render: function render() {
		return React.createElement(
			'div',
			null,
			React.createElement(Renderics, { devices: siteScopeDevices })
		);
	}
});

React.render(React.createElement(App, null), document.getElementById('app'));

},{"react":undefined,"react-renderics":undefined}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFjdC1jb21wb25lbnQtZ3VscC10YXNrcy9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwiL1VzZXJzL2Zlcm5hbmRvbWFuby9EZXNrdG9wL2lsZWdyYS9Pcml6b24vRGFzaGJvYXJkL3BvY3MvcmVhY3QteW8vcmVhY3QtcmVuZGVyaWNzL2V4YW1wbGUvc3JjL2V4YW1wbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM3QixJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQzs7O0FBRzNDLElBQUksZ0JBQWdCLEdBQUcsQ0FDdEIsa0JBQWtCLENBQUMsbUJBQW1CLENBQUMsRUFDdkMsa0JBQWtCLENBQUMseUJBQXlCLENBQUMsRUFDN0Msa0JBQWtCLENBQUMscUJBQXFCLENBQUMsRUFDekMsa0JBQWtCLENBQUMsa0JBQWtCLENBQUMsRUFDdEMsa0JBQWtCLENBQUMsMEJBQTBCLENBQUMsRUFDOUMsa0JBQWtCLENBQUMsb0JBQW9CLENBQUMsRUFDeEMsa0JBQWtCLENBQUMsc0JBQXNCLENBQUMsRUFDMUMsa0JBQWtCLENBQUMsdUJBQXVCLENBQUMsRUFDM0Msa0JBQWtCLENBQUMsNkJBQTZCLENBQUMsQ0FDakQsQ0FBQzs7QUFFRixTQUFTLGtCQUFrQixDQUFDLGdCQUFnQixFQUFFO0FBQzdDLEtBQUksTUFBTSxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN6QyxLQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0IsS0FBSSxVQUFVLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7QUFHM0IsS0FBSSxZQUFZLEdBQUcsU0FBUyxDQUFDO0FBQzdCLEtBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxZQUFZLElBQUksV0FBVyxDQUFDLEtBQzlDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsRUFBRSxZQUFZLElBQUksZ0JBQWdCLENBQUMsS0FDN0QsWUFBWSxJQUFJLGNBQWMsQ0FBQzs7QUFFcEMsUUFBTztBQUNOLE1BQUksRUFBRSxVQUFVO0FBQ2hCLFVBQVEsRUFBRSxZQUFZO0FBQ3RCLE1BQUksRUFBRSxVQUFVO0VBQ2hCLENBQUM7Q0FDRixDQUFDOztBQUVGLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7OztBQUMzQixPQUFNLEVBQUMsa0JBQUc7QUFDVCxTQUNDOzs7R0FDQyxvQkFBQyxTQUFTLElBQUMsT0FBTyxFQUFFLGdCQUFnQixBQUFDLEdBQUc7R0FDbkMsQ0FDTDtFQUNGO0NBQ0QsQ0FBQyxDQUFDOztBQUVILEtBQUssQ0FBQyxNQUFNLENBQUMsb0JBQUMsR0FBRyxPQUFHLEVBQUUsUUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsInZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgUmVuZGVyaWNzID0gcmVxdWlyZSgncmVhY3QtcmVuZGVyaWNzJyk7XG5cbi8vSU5QVVRcbnZhciBzaXRlU2NvcGVEZXZpY2VzID0gW1xuXHRnZW5TaXRlU2NvcGVEZXZpY2UoXCJWQUxFTkNJQTAxOkNQVTpPS1wiKSxcblx0Z2VuU2l0ZVNjb3BlRGV2aWNlKFwiVkFMRU5DSUEwMTpQSU5HOldBUk5JTkdcIiksXG5cdGdlblNpdGVTY29wZURldmljZShcIlZBTEVOQ0lBMDE6SkJPU1M6T0tcIiksXG5cdGdlblNpdGVTY29wZURldmljZShcIkJFTklDSUEwMTpDUFU6T0tcIiksXG5cdGdlblNpdGVTY29wZURldmljZShcIkJBUkNFTE9OQTAxOlBJTkc6V0FSTklOR1wiKSxcblx0Z2VuU2l0ZVNjb3BlRGV2aWNlKFwiTE9ORE9OMDE6VE9NQ0FUOk9LXCIpLFxuXHRnZW5TaXRlU2NvcGVEZXZpY2UoXCJNQU5DSEVTVEVSMDE6Q1BVOkJBRFwiKSxcblx0Z2VuU2l0ZVNjb3BlRGV2aWNlKFwiTUFOQ0hFU1RFUjAxOlBJTkc6QkFEXCIpLFxuXHRnZW5TaXRlU2NvcGVEZXZpY2UoXCJNQU5DSEVTVEVSMDE6VE9NQ0FUOldBUk5JTkdcIilcbl07XG5cbmZ1bmN0aW9uIGdlblNpdGVTY29wZURldmljZShzaXRlU2NvcGVMaW5lTG9nKSB7XG5cdHZhciBkZXZpY2UgPSBzaXRlU2NvcGVMaW5lTG9nLnNwbGl0KFwiOlwiKTtcblx0dmFyIGRldmljZU5hbWUgPSBkZXZpY2VbMF07XG5cdHZhciBkZXZpY2VUeXBlID0gZGV2aWNlWzFdO1xuXG5cdC8vVE9ETyBNZWxob3JhciBlc3RlIHRyYXRhbWVudG8gZSBxdWVicmFyIGVtIG91dHJhIGZ1bsOnw6NvXG5cdHZhciBkZXZpY2VTdGF0dXMgPSBcImltYWdlcy9cIjtcblx0aWYgKGRldmljZVsyXSA9PSBcIk9LXCIpIGRldmljZVN0YXR1cyArPSBcImljLW9rLnBuZ1wiO1xuXHRlbHNlIGlmIChkZXZpY2VbMl0gPT0gXCJXQVJOSU5HXCIpIGRldmljZVN0YXR1cyArPSBcImljLXdhcm5pbmcucG5nXCI7XG5cdGVsc2UgZGV2aWNlU3RhdHVzICs9IFwiaWMtZXJyb3IucG5nXCI7XG5cblx0cmV0dXJuIHtcblx0XHRuYW1lOiBkZXZpY2VOYW1lLFxuXHRcdGltYWdlU3JjOiBkZXZpY2VTdGF0dXMsXG5cdFx0dHlwZTogZGV2aWNlVHlwZVxuXHR9O1xufTtcblxudmFyIEFwcCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0cmVuZGVyICgpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdj5cblx0XHRcdFx0PFJlbmRlcmljcyBkZXZpY2VzPXtzaXRlU2NvcGVEZXZpY2VzfSAvPlxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fVxufSk7XG5cblJlYWN0LnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJykpO1xuIl19
